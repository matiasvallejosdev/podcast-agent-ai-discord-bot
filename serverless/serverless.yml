org: matiasvallejosdev
app: podcast-agent-gpt-aws
service: podcast-agent-gpt-aws
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.11
  stage: dev
  region: us-east-2
  architecture: arm64
  apiGateway:
    description: API Gateway for Podcast Agent GPT AWS.
    apiKeys:
      - name: ${env:API_KEY_NAME}
    usagePlan:
      quota:
        limit: 5000
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${env:MEMORY_TABLE_NAME}

useDotenv: true

functions:
  health:
    handler: services/health/health_check.lambda_handler
    description: Health Check for API Gateway.
    events:
      - http:
          path: /health
          method: GET
    package:
      patterns:
        - "!**"
        - services/health/**
        - common/**
  upload_url_s3:
    handler: services/files/get_upload_url_s3.lambda_handler
    description: Get expires URL to upload a file to AWS bucket.
    environment:
      S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    role: s3BucketRole
    events:
      - http:
          path: /files/upload
          method: GET
          private: true
    package:
      patterns:
        - "!**"
        - services/files/**
        - common/**
  gpt_ask:
    handler: services/gpt/ask.lambda_handler
    description: Given a set of messages ask to chat gpt and respond with a message.
    memorySize: 128
    timeout: 10
    environment:
      OPENAI_API_KEY: ${env:OPENAI_API_KEY}
      OPENAI_GPTMODEL: ${env:OPENAI_GPTMODEL}
      OPENAI_TEMPERATURE: ${env:OPENAI_TEMPERATURE}
      OPENAI_TOKENS: ${env:OPENAI_TOKENS}
    events:
      - http:
          path: /gpt/ask
          method: POST
          private: true
    layers:
      - arn:aws:lambda:us-east-2:680662318279:layer:openai-aws-lambda:1
    package:
      patterns:
        - "!**"
        - services/gpt/**
        - common/**
  save_session:
    handler: services/memory/save_session.lambda_handler
    description: Add a message to the database by user id.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/{session_id}
          method: POST
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**
  get_session:
    handler: services/memory/get_session.lambda_handler
    description: Get all messages and metadata from a session.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/{session_id}
          method: GET
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**
  update_session_metadata:
    handler: services/memory/update_session_metadata.lambda_handler
    description: Update session metadata like 'title' or 'user_id'.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/{session_id}/metadata
          method: POST
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**
  delete_session:
    handler: services/memory/delete_session.lambda_handler
    description: Delete session using session_id.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/{session_id}
          method: DELETE
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**
  get_all_sessions:
    handler: services/memory/get_all_sessions.lambda_handler
    description: Get all sessions.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/
          method: GET
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**
  clear_messages:
    handler: services/memory/clear_messages.lambda_handler
    description: Add a message to the database by user id.
    environment:
      MEMORY_TABLE_NAME: ${env:MEMORY_TABLE_NAME}
    events:
      - http:
          path: sessions/{session_id}/clear
          method: DELETE
          private: true
    package:
      patterns:
        - "!**"
        - services/memory/**
        - common/**

resources:
  Resources:
    MemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:MEMORY_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    s3BucketRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: podcast-agent-s3-bucket-role
        Path: /production/podcast-management/
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::680662318279:policy/podcast-agent-s3-bucket

package:
  individually: true
